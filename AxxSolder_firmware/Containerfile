FROM alpine:3.20.3

ARG TARGETPLATFORM=linux/amd64
ARG BUILDPLATFORM=linux/amd64
ARG TOOLS_PATH=/opt/gcc-arm-none-eabi
ARG ARM_VERSION=13.3.rel1
RUN apk add --no-cache

RUN apk update && apk add --no-cache --virtual build-dependencies \
	build-base \
	clang llvm-static llvm-dev clang-static clang-dev \
	gcompat libc6-compat libgcc libstdc++ g++ gcc \
	musl-dev \
	make cmake ninja \
	git gnupg \
	stlink \
	bash curl xz

# Get ARM Toolchain
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then export ARM_ARCH=x86_64; \
	else export ARM_ARCH=aarch64; \
	fi \
	&& echo "Downloading ARM GNU GCC for Platform: $ARM_ARCH" \
	&& mkdir ${TOOLS_PATH} \
	&& curl -Lo gcc-arm-none-eabi.tar.xz "https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_VERSION}/binrel/arm-gnu-toolchain-${ARM_VERSION}-${ARM_ARCH}-arm-none-eabi.tar.xz" \
	&& tar xf gcc-arm-none-eabi.tar.xz --strip-components=1 -C ${TOOLS_PATH} \
	&& rm gcc-arm-none-eabi.tar.xz \
	&& rm ${TOOLS_PATH}/*.txt \
	&& rm -rf ${TOOLS_PATH}/share/doc \
	&& echo "https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_VERSION}/binrel/arm-gnu-toolchain-${ARM_VERSION}-${ARM_ARCH}-arm-none-eabi.tar.xz"


ENV PATH="$PATH:${TOOLS_PATH}/bin"

WORKDIR /app

COPY . .

RUN set -eux; \
    cmake -S . -B build; \
    cmake --build build -j4; \
    ls -al build;